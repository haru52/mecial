// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Social {
    id           Int      @id @default(autoincrement())
    screenName   String   @unique
    isPrivate    Boolean
    name         String
    image        String?
    description  String?
    url          String?
    avatars      Avatar[]
    currentUsers User[]   @relation("currentSocial")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    createdBy       User?   @relation("createdSocial", fields: [createdById], references: [id], onDelete: SetNull)
    createdById     String?
    administrator   User    @relation("socialAdministrator", fields: [administratorId], references: [id])
    administratorId String

    @@index([screenName])
}

model Avatar {
    id         String    @id @default(uuid())
    isPrivate  Boolean   @default(false)
    posts      Post[]
    followedBy Follows[] @relation("followedBy")
    following  Follows[] @relation("following")
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt

    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String
    social   Social @relation(fields: [socialId], references: [id], onDelete: Cascade)
    socialId Int

    @@unique([socialId, userId])
    @@index([socialId, userId])
}

model Post {
    id        Int      @id @default(autoincrement())
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   Avatar @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    @@index([content])
}

model Follows {
    id           Int      @id @default(autoincrement())
    followedBy   Avatar   @relation("followedBy", fields: [followedById], references: [id], onDelete: Cascade)
    followedById String
    following    Avatar   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
    followingId  String
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@unique([followingId, followedById])
    @@index([followingId, followedById])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(uuid())
    screenName     String?   @unique
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    introduction   String?
    url            String?
    accounts       Account[]
    sessions       Session[]
    createdSocials Social[]  @relation("createdSocial")
    adminSocials   Social[]  @relation("socialAdministrator")
    avatars        Avatar[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    currentSocial   Social? @relation("currentSocial", fields: [currentSocialId], references: [id], onDelete: SetNull)
    currentSocialId Int?

    @@index([screenName])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
